/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controller.Helper.DateSupport;
import Controller.Helper.Image_Auth;
import Controller.Helper.Mgsbox;
import Controller.Helper.ValidateSupport;
import Controller.ModelDAO.MedicineDAO;
import Controller.ModelDAO.TypeOfMedicineDAO;
import Controller.ModelDAO.WareHouseDAO;
import Model.Medicine;
import Model.TypeOfMedicine;
import Model.WareHouse;
import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Laxus
 */
public class WarehouseForm extends javax.swing.JPanel {

    /**
     * Creates new form Warehouse1
     */
    public WarehouseForm() {
        initComponents();
        EditTable(tblWarehouse);
        loadDataToTable();
        loadComboboxTypeOfMedicine();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupPrescription = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        lblMedicineName = new javax.swing.JLabel();
        txtMedicineName = new javax.swing.JTextField();
        jdcDateImport = new com.toedter.calendar.JDateChooser();
        lblManufacture = new javax.swing.JLabel();
        jdcManufactureDate = new com.toedter.calendar.JDateChooser();
        lblExpirationDate = new javax.swing.JLabel();
        jdcExpirationDate = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txpBatchNote = new javax.swing.JTextPane();
        lblMedicineIngre = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txpMedicineIngre = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblWarehouse = new javax.swing.JTable();
        lblMedicineConcen = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txpMedicineConcen = new javax.swing.JTextPane();
        lblUnit = new javax.swing.JLabel();
        txtUnit = new javax.swing.JTextField();
        lblPrice = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        btnImport = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        btnRefesh = new javax.swing.JButton();
        lblTypeOfMedicineID = new javax.swing.JLabel();
        lblUserObject = new javax.swing.JLabel();
        cbxTypeOfMedicineID = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txpUserObject = new javax.swing.JTextPane();
        lblNameOfTOM = new javax.swing.JLabel();
        txtNameOfTOM = new javax.swing.JTextField();
        lblNote = new javax.swing.JLabel();
        lblPrecription = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txpNote = new javax.swing.JTextPane();
        rdoTruePre = new javax.swing.JRadioButton();
        lblBatchID = new javax.swing.JLabel();
        txtBatchID = new javax.swing.JTextField();
        lblDistributor = new javax.swing.JLabel();
        txtDistributor = new javax.swing.JTextField();
        lblQuantity = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        rdoFalsePre = new javax.swing.JRadioButton();
        lblRemainingAmout = new javax.swing.JLabel();
        txtRemainingAmout = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        lblDateImport = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        lblMedicineID = new javax.swing.JLabel();
        cbxMedicineID = new javax.swing.JComboBox<>();
        lblProducerID = new javax.swing.JLabel();
        txtProducerID = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator11 = new javax.swing.JSeparator();
        jSeparator12 = new javax.swing.JSeparator();
        jSeparator13 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(242, 242, 242));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 51, 255));
        jLabel1.setText("Warehouse");

        lblMedicineName.setText("Medicide's name:");

        txtMedicineName.setEditable(false);
        txtMedicineName.setBackground(new java.awt.Color(255, 255, 255));
        txtMedicineName.setBorder(null);

        jdcDateImport.setDateFormatString("yyyy-MM-dd\n");

        lblManufacture.setText("Manufacture Date:");

        jdcManufactureDate.setDate(new java.util.Date(1637055667000L));
        jdcManufactureDate.setDateFormatString("yyyy-MM-dd");

        lblExpirationDate.setText("Expiration Date:");

        jdcExpirationDate.setDateFormatString("yyyy-MM-dd");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Note");

        txpBatchNote.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane6.setViewportView(txpBatchNote);

        lblMedicineIngre.setText("Medicine's Ingredient:");

        jScrollPane4.setToolTipText("");

        txpMedicineIngre.setEditable(false);
        jScrollPane4.setViewportView(txpMedicineIngre);

        tblWarehouse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "BatchID", "Employee ID", "Distributor", "Date Import", "Manufacture Date", "Expiration Date", "Quantity", "Remaning Amout", "Note"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblWarehouse.setFocusable(false);
        tblWarehouse.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tblWarehouse.setRowHeight(25);
        tblWarehouse.setSelectionBackground(new java.awt.Color(232, 57, 95));
        tblWarehouse.setShowGrid(false);
        tblWarehouse.setShowHorizontalLines(true);
        tblWarehouse.getTableHeader().setReorderingAllowed(false);
        tblWarehouse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblWarehouseMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblWarehouse);

        lblMedicineConcen.setText("Medicine's Concentration:");

        txpMedicineConcen.setEditable(false);
        jScrollPane5.setViewportView(txpMedicineConcen);

        lblUnit.setText("Unit:");

        txtUnit.setEditable(false);
        txtUnit.setBackground(new java.awt.Color(255, 255, 255));
        txtUnit.setBorder(null);

        lblPrice.setText("Price:");

        txtPrice.setEditable(false);
        txtPrice.setBackground(new java.awt.Color(255, 255, 255));
        txtPrice.setBorder(null);

        btnImport.setBackground(new java.awt.Color(0, 153, 255));
        btnImport.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnImport.setForeground(new java.awt.Color(255, 255, 255));
        btnImport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/import.png"))); // NOI18N
        btnImport.setText("Import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnRefesh.setBackground(new java.awt.Color(0, 153, 255));
        btnRefesh.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefesh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefesh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/import.png"))); // NOI18N
        btnRefesh.setText("Refesh");
        btnRefesh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefeshActionPerformed(evt);
            }
        });

        lblTypeOfMedicineID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblTypeOfMedicineID.setText("Type Of Medicine ID:");

        lblUserObject.setText("User Object:");

        cbxTypeOfMedicineID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxTypeOfMedicineID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxTypeOfMedicineIDItemStateChanged(evt);
            }
        });
        cbxTypeOfMedicineID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbxTypeOfMedicineIDMouseClicked(evt);
            }
        });
        cbxTypeOfMedicineID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTypeOfMedicineIDActionPerformed(evt);
            }
        });

        txpUserObject.setEditable(false);
        jScrollPane1.setViewportView(txpUserObject);

        lblNameOfTOM.setText("Name of TOM:");

        txtNameOfTOM.setEditable(false);
        txtNameOfTOM.setBackground(new java.awt.Color(255, 255, 255));
        txtNameOfTOM.setBorder(null);
        txtNameOfTOM.setMargin(new java.awt.Insets(2, 2, 0, 2));

        lblNote.setText("Note:");

        lblPrecription.setText("Precription:");

        txpNote.setEditable(false);
        jScrollPane3.setViewportView(txpNote);

        rdoTruePre.setBackground(new java.awt.Color(255, 255, 255));
        btnGroupPrescription.add(rdoTruePre);
        rdoTruePre.setText("Yes");

        lblBatchID.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        lblBatchID.setForeground(new java.awt.Color(255, 51, 51));
        lblBatchID.setText("Batch ID:");

        lblDistributor.setText("Distributor:");

        txtDistributor.setBorder(null);

        lblQuantity.setText("Quantity:");

        txtQuantity.setBorder(null);
        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQuantityKeyReleased(evt);
            }
        });

        rdoFalsePre.setBackground(new java.awt.Color(255, 255, 255));
        btnGroupPrescription.add(rdoFalsePre);
        rdoFalsePre.setText("No");
        rdoFalsePre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoFalsePreActionPerformed(evt);
            }
        });

        lblRemainingAmout.setText("Remaining Amout:");

        txtRemainingAmout.setEditable(false);
        txtRemainingAmout.setBackground(new java.awt.Color(255, 255, 255));
        txtRemainingAmout.setBorder(null);

        lblDateImport.setText("Import Date:");

        lblMedicineID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMedicineID.setForeground(new java.awt.Color(255, 51, 51));
        lblMedicineID.setText("Medicine ID:");

        cbxMedicineID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblProducerID.setText("Producer ID:");

        txtProducerID.setEditable(false);
        txtProducerID.setBackground(new java.awt.Color(255, 255, 255));
        txtProducerID.setBorder(null);
        txtProducerID.setMargin(new java.awt.Insets(2, 2, 0, 2));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 804, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jdcExpirationDate, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRefesh, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(277, 277, 277)
                                        .addComponent(lblUserObject)
                                        .addGap(19, 19, 19)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblTypeOfMedicineID)
                                                .addGap(4, 4, 4)
                                                .addComponent(cbxTypeOfMedicineID, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(10, 10, 10)
                                                .addComponent(lblNameOfTOM)
                                                .addGap(10, 10, 10)
                                                .addComponent(txtNameOfTOM, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addComponent(lblPrecription)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rdoTruePre, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rdoFalsePre, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(lblNote)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 846, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblMedicineID)
                                .addGap(4, 4, 4)
                                .addComponent(cbxMedicineID, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMedicineIngre)
                                    .addComponent(lblProducerID)
                                    .addComponent(lblUnit))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSeparator6)
                                    .addComponent(txtProducerID)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                    .addComponent(jSeparator4)
                                    .addComponent(txtUnit))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMedicineConcen)
                                    .addComponent(lblMedicineName)
                                    .addComponent(lblPrice))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtMedicineName, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                    .addComponent(txtPrice, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jSeparator7))))
                        .addGap(0, 14, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblBatchID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBatchID, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblDistributor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtDistributor, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(19, 19, 19)
                                        .addComponent(lblQuantity)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane6))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblDateImport)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jdcDateImport, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(lblManufacture)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jdcManufactureDate, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblExpirationDate)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblRemainingAmout)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSeparator11)
                                    .addComponent(txtRemainingAmout, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(lblTypeOfMedicineID))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(cbxTypeOfMedicineID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(lblNameOfTOM))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(txtNameOfTOM, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPrecription)
                        .addComponent(rdoTruePre)
                        .addComponent(rdoFalsePre)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUserObject)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNote)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbxMedicineID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMedicineID)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblProducerID)
                                .addComponent(txtProducerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblMedicineName)
                                .addComponent(txtMedicineName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator4)
                    .addComponent(jSeparator5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMedicineIngre)
                    .addComponent(lblMedicineConcen)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUnit)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblBatchID)
                                    .addComponent(txtBatchID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDistributor)
                                    .addComponent(txtDistributor, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblRemainingAmout)
                                    .addComponent(txtRemainingAmout, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblQuantity)))))
                    .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblExpirationDate)
                                .addComponent(jdcExpirationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jdcManufactureDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblManufacture, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jdcDateImport, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblDateImport)))
                    .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImport)
                    .addComponent(btnRefesh))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblWarehouseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblWarehouseMouseClicked
        // TODO add your handling code here:
        String BatchID = tblWarehouse.getValueAt(tblWarehouse.getSelectedRow(), 0).toString();
        Medicine mdc = new MedicineDAO().selectByBatchID(BatchID);
        WareHouse wh = new WareHouseDAO().selectByID(BatchID);
        TypeOfMedicine tom = new TypeOfMedicineDAO().selectByID(mdc.getMdcTypeOfMedicineID());
        setModelMedicine(mdc);
        setModelWareHouse(wh);
        setModelTOM(tom);
    }//GEN-LAST:event_tblWarehouseMouseClicked

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed

        if (new WareHouseDAO().isDuplicateWarehouseID(txtBatchID.getText())) {
            Mgsbox.error(this, "Batch ID is duplicated!");
        } else if (ValidateSupport.isNull(txtBatchID) || ValidateSupport.isNull(txtDistributor) || ValidateSupport.isNull(txtQuantity)) {
            Mgsbox.error(this, "Can not be blank!");
        } else if (isCheckHSD(jdcManufactureDate, jdcExpirationDate) && ValidateSupport.isNumber(txtUnit)) {
            try {
                new WareHouseDAO().insert(getModel());
                ofMedicine.setMdcBatchID(txtBatchID.getText().trim());
                new MedicineDAO().insert(ofMedicine);
                clearFormBatch();
                Mgsbox.alert(this, "Import medicine successfully...");
                ofMedicine = null;
                loadDataToTable();
            } catch (Exception e) {
                Mgsbox.error(this, "Import medicine failed!!!");
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnRefeshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefeshActionPerformed
        // TODO add your handling code here:
        tblWarehouse.clearSelection();
        clearFormTOM();
        clearFormBatch();
        clearFormMedicine();
        loadDataToTable();
        loadComboboxTypeOfMedicine();
    }//GEN-LAST:event_btnRefeshActionPerformed

    private void cbxTypeOfMedicineIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxTypeOfMedicineIDItemStateChanged
        // TODO add your handling code her
    }//GEN-LAST:event_cbxTypeOfMedicineIDItemStateChanged

    private void cbxTypeOfMedicineIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbxTypeOfMedicineIDMouseClicked
        // TODO add your handling code here:
        //
    }//GEN-LAST:event_cbxTypeOfMedicineIDMouseClicked

    private void cbxTypeOfMedicineIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTypeOfMedicineIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxTypeOfMedicineIDActionPerformed

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void txtQuantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyReleased

        txtRemainingAmout.setText(txtQuantity.getText().trim());
    }//GEN-LAST:event_txtQuantityKeyReleased

    private void rdoFalsePreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoFalsePreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoFalsePreActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGroupPrescription;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnRefesh;
    private javax.swing.JComboBox<String> cbxMedicineID;
    private javax.swing.JComboBox<String> cbxTypeOfMedicineID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private com.toedter.calendar.JDateChooser jdcDateImport;
    private com.toedter.calendar.JDateChooser jdcExpirationDate;
    private com.toedter.calendar.JDateChooser jdcManufactureDate;
    private javax.swing.JLabel lblBatchID;
    private javax.swing.JLabel lblDateImport;
    private javax.swing.JLabel lblDistributor;
    private javax.swing.JLabel lblExpirationDate;
    private javax.swing.JLabel lblManufacture;
    private javax.swing.JLabel lblMedicineConcen;
    private javax.swing.JLabel lblMedicineID;
    private javax.swing.JLabel lblMedicineIngre;
    private javax.swing.JLabel lblMedicineName;
    private javax.swing.JLabel lblNameOfTOM;
    private javax.swing.JLabel lblNote;
    private javax.swing.JLabel lblPrecription;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblProducerID;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblRemainingAmout;
    private javax.swing.JLabel lblTypeOfMedicineID;
    private javax.swing.JLabel lblUnit;
    private javax.swing.JLabel lblUserObject;
    private javax.swing.JRadioButton rdoFalsePre;
    private javax.swing.JRadioButton rdoTruePre;
    private javax.swing.JTable tblWarehouse;
    private javax.swing.JTextPane txpBatchNote;
    private javax.swing.JTextPane txpMedicineConcen;
    private javax.swing.JTextPane txpMedicineIngre;
    private javax.swing.JTextPane txpNote;
    private javax.swing.JTextPane txpUserObject;
    private javax.swing.JTextField txtBatchID;
    private javax.swing.JTextField txtDistributor;
    private javax.swing.JTextField txtMedicineName;
    private javax.swing.JTextField txtNameOfTOM;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtProducerID;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtRemainingAmout;
    private javax.swing.JTextField txtUnit;
    // End of variables declaration//GEN-END:variables
    private void EditTable(JTable a) {
        a.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 12));
        a.getTableHeader().setOpaque(false);
        a.getTableHeader().setBackground(new Color(32, 136, 203));
        a.getTableHeader().setForeground(new Color(255, 255, 255));
        a.setRowHeight(25);
    }

    private Medicine ofMedicine = null;

    private void loadDataToTable() {
        DefaultTableModel defaultTableModel = (DefaultTableModel) tblWarehouse.getModel();
        defaultTableModel.setRowCount(0);
        try {
            List<WareHouse> wareHouse = new WareHouseDAO().selectAll();
            wareHouse.forEach(wh -> {
                defaultTableModel.addRow(new Object[]{wh.getWhBatchID(),
                    wh.getWhEmployeeID(),
                    wh.getWhDistributor(),
                    wh.getWhImportDay(),
                    wh.getWhDateOfManufacture(),
                    wh.getWhExpiryDate(),
                    wh.getWhQuantity(),
                    wh.getWhRemainingAmout(),
                    wh.getWhNote()});
            });
        } catch (Exception e) {
        }
    }

    private void clearFormTOM() {
        txtNameOfTOM.setText("");
        btnGroupPrescription.clearSelection();
        txpUserObject.setText("");
        txpNote.setText("");
    }

    private void clearFormBatch() {
        txtBatchID.setText("");
        txtDistributor.setText("");
        txtQuantity.setText("");
        txpBatchNote.setText("");
        txtRemainingAmout.setText("");
    }

    private void clearFormMedicine() {
        txtMedicineName.setText("");
        txpMedicineConcen.setText("");
        txpMedicineIngre.setText("");
        txtProducerID.setText("");
        txtUnit.setText("");
        txtPrice.setText("");
    }

    private void loadComboboxTypeOfMedicine() {
        DefaultComboBoxModel boxModel = (DefaultComboBoxModel) cbxTypeOfMedicineID.getModel();
        boxModel.removeAllElements();
        boxModel.addElement("Please Choose");
        try {
            List<TypeOfMedicine> typeOfMedicines = new TypeOfMedicineDAO().selectAll();
            typeOfMedicines.forEach(typeOfMedicine -> {
                boxModel.addElement(typeOfMedicine.getTomID());
            });
        } catch (Exception e) {
        }

        cbxTypeOfMedicineID.addItemListener((ItemEvent event) -> {
            if (event.getStateChange() == ItemEvent.SELECTED) {
                if (cbxTypeOfMedicineID.getSelectedIndex() != 0) {
                    String IDType = cbxTypeOfMedicineID.getSelectedItem().toString();
                    loadComboboxMedicineID(IDType);
                    TypeOfMedicine ofTMedicine = new TypeOfMedicineDAO().selectByID(IDType);
                    setModelTOM(ofTMedicine);
                    clearFormBatch();
                    clearFormMedicine();
                } else {
                    //new MedicineTypeForm().setVisible(true);
                }

            }
        });
    }

    private void loadComboboxMedicineID(String TypeOfMedicineID) {
        DefaultComboBoxModel boxModelMecicine = (DefaultComboBoxModel) cbxMedicineID.getModel();
        boxModelMecicine.removeAllElements();
        boxModelMecicine.addElement("Please Choose");
        try {
            List<Medicine> medicines = new MedicineDAO().selectByTypeOfMedicineID(TypeOfMedicineID);
            medicines.forEach(medicine -> {
                boxModelMecicine.addElement(medicine.getMdcID());
            });
        } catch (Exception e) {
        }
        cbxMedicineID.addItemListener((ItemEvent event) -> {
            if (event.getStateChange() == ItemEvent.SELECTED && cbxMedicineID.getSelectedIndex() != 0) {
                String ID = cbxMedicineID.getSelectedItem().toString();
                ofMedicine = new MedicineDAO().selectByID(ID);
                setModelMedicine(ofMedicine);
            }
        });
    }

    private void setModelMedicine(Medicine ofMedicine) {
        DefaultComboBoxModel boxModelMecicine = (DefaultComboBoxModel) cbxMedicineID.getModel();
        boxModelMecicine.removeAllElements();
        boxModelMecicine.addElement(ofMedicine.getMdcID());
        cbxMedicineID.setSelectedItem(ofMedicine.getMdcID());
        txtProducerID.setText(ofMedicine.getMdcProducerID());
        txtMedicineName.setText(ofMedicine.getMdcName());
        txpMedicineIngre.setText(ofMedicine.getMdcIngredient());
        txpMedicineConcen.setText(ofMedicine.getMdcConcentration());
        txtUnit.setText(ofMedicine.getMdcUnit());
        txtPrice.setText(ofMedicine.getMdcPriceImport() + "");
    }

    private void setModelTOM(TypeOfMedicine ofTMedicine) {
        cbxTypeOfMedicineID.setSelectedItem(ofTMedicine.getTomID());
        txtNameOfTOM.setText(ofTMedicine.getTomName());
        rdoFalsePre.setSelected(ofTMedicine.isTomIsPrecription() ? false : true);
        rdoTruePre.setSelected(ofTMedicine.isTomIsPrecription());
        txpUserObject.setText(ofTMedicine.getTomUserObject().trim());
        txpNote.setText(ofTMedicine.getTomNote() == null ? "There are no notes" : ofTMedicine.getTomNote());
    }

    private void setModelWareHouse(WareHouse wh) {
        txtBatchID.setText(wh.getWhBatchID());
        txtDistributor.setText(wh.getWhDistributor());
        txtQuantity.setText(wh.getWhQuantity() + "");
        txtRemainingAmout.setText(wh.getWhRemainingAmout() + "");
        txpNote.setText(wh.getWhNote());
        jdcDateImport.setDate(wh.getWhImportDay());
        jdcExpirationDate.setDate(wh.getWhExpiryDate());
        jdcManufactureDate.setDate(wh.getWhDateOfManufacture());
    }

    private WareHouse getModel() {
        WareHouse wh = new WareHouse();
        wh.setWhBatchID(txtBatchID.getText());
        wh.setWhEmployeeID(Image_Auth.USER.getEpeID());
        wh.setWhDistributor(txtDistributor.getText());
        wh.setWhImportDay(DateSupport.toDate(new SimpleDateFormat("yyyy-MM-dd").format(jdcDateImport.getDate())));
        wh.setWhDateOfManufacture(DateSupport.toDate(new SimpleDateFormat("yyyy-MM-dd").format(jdcManufactureDate.getDate())));
        wh.setWhExpiryDate(DateSupport.toDate(new SimpleDateFormat("yyyy-MM-dd").format(jdcExpirationDate.getDate())));
        wh.setWhQuantity(Integer.parseInt(txtQuantity.getText()));
        wh.setWhRemainingAmout(Integer.parseInt(txtRemainingAmout.getText()));
        wh.setWhNote(txpBatchNote.getText());
        return wh;
    }

    public boolean isCheckHSD(JDateChooser date, JDateChooser date2) {
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        c1.setTime(date.getDate());
        c2.setTime(date2.getDate());
        long a = (c2.getTime().getTime() - c1.getTime().getTime());
        if (a <= 0) {
            Mgsbox.error(date.getRootPane(), "Medicine has expired");
            return false;
        } else {
            return true;
        }
    }
}
